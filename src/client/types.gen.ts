// This file is auto-generated by @hey-api/openapi-ts

export type def_0 = {
  authorization: string;
};

export type def_1 = {
  statusCode: string;
  error: string;
  message: string;
};

export type ListSitesResponse = {
  data?: Array<{
    id: string;
    name: string;
    workspaceId: string;
    createdAt: string;
    publishedAt?: string;
    updatedAt: string;
  }>;
};

export type GetSiteByIdData = {
  /**
   * Unique identifier for the Site
   */
  siteId: string;
};

export type GetSiteByIdResponse = {
  data?: {
    id: string;
    name: string;
    customDomain: string | null;
    planId: string;
    workspaceId: string;
    sitePassword: string | null;
    seo: {
      title: string;
      description: string;
    };
    metaTags: Array<{
      field: string;
      value: string;
      content: string;
    }>;
    favicon: string | null;
    baseUrl: string | null;
    analytics: boolean;
    integrations: {
      [key: string]: {
        id: string;
        delay: number;
      };
    };
    head: string;
    scripts: string;
    config: {
      [key: string]: unknown;
    };
    CSS: string;
    JS: string;
    files: {
      _redirects: string;
      'robots.txt': string;
      'sitemap.xml': string;
      'page-sitemap.xml': string;
    };
    folders: Array<{
      id: string;
      name: string;
      slug: string;
    }>;
    componentFolders: Array<{
      id: string;
      name: string;
    }>;
    collectionVariables: {
      collections: {
        [key: string]: {
          name: string;
          singularName: string;
          offset?: number;
          limit?: number;
          sortItems?: Array<{
            fieldName: string;
            sortBy: 'asc' | 'desc';
          }>;
          filterItems?: Array<{
            fieldName: string;
            filterType: '<' | '>' | '<=' | '>=' | '==' | '!=';
            value?: string;
          }>;
        };
      };
    };
    createdAt: string;
    updatedAt: string;
    publishedAt?: string;
  };
};

export type PublishSiteData = {
  /**
   * Unique identifier for the Site
   */
  siteId: string;
};

export type PublishSiteResponse = {
  [key: string]: unknown;
};

export type ListPagesData = {
  /**
   * Unique identifier for the Site
   */
  siteId: string;
};

export type ListPagesResponse = {
  data?: Array<{
    id: string;
    name: string;
    slug: string;
    folderId: string | null;
    folderPath?: string;
    status: 'draft' | 'publish';
    head: string;
    scripts: string;
    seo: {
      title: string;
      description: string;
    };
    metaTags: Array<{
      field: string;
      value: string;
      content: string;
    }>;
    layout: {
      name: string | null;
    };
    bodyProperties: {
      id?: string;
      className?: string;
      [key: string]: string | undefined;
    };
    html: string;
    collectionProperties?: {
      name: string;
      groupBy: string | null;
      pageType: 'list' | 'detail';
      offset?: number;
      limit?: number;
      itemsPerPage: number | null;
      filterItems: Array<{
        fieldName: string;
        filterType: '<' | '>' | '<=' | '>=' | '==' | '!=';
        value?: string;
      }>;
      sortItems: Array<{
        fieldName: string;
        sortBy: 'asc' | 'desc';
      }>;
    };
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    createdBy: string;
    updatedBy: string;
    deletedBy?: string;
  }>;
};

export type GetPageData = {
  /**
   * Unique identifier for the Page
   */
  pageId: string;
  /**
   * Unique identifier for the Site
   */
  siteId: string;
};

export type GetPageResponse = {
  data?: {
    id: string;
    name: string;
    slug: string;
    folderId: string | null;
    folderPath?: string;
    status: 'draft' | 'publish';
    head: string;
    scripts: string;
    seo: {
      title: string;
      description: string;
    };
    metaTags: Array<{
      field: string;
      value: string;
      content: string;
    }>;
    layout: {
      name: string | null;
    };
    bodyProperties: {
      id?: string;
      className?: string;
      [key: string]: string | undefined;
    };
    html: string;
    collectionProperties?: {
      name: string;
      groupBy: string | null;
      pageType: 'list' | 'detail';
      offset?: number;
      limit?: number;
      itemsPerPage: number | null;
      filterItems: Array<{
        fieldName: string;
        filterType: '<' | '>' | '<=' | '>=' | '==' | '!=';
        value?: string;
      }>;
      sortItems: Array<{
        fieldName: string;
        sortBy: 'asc' | 'desc';
      }>;
    };
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    createdBy: string;
    updatedBy: string;
    deletedBy?: string;
  };
};

export type ListComponentsData = {
  /**
   * Unique identifier for the Site
   */
  siteId: string;
};

export type ListComponentsResponse = {
  data?: Array<{
    id: string;
    name: string;
    folderId: string | null;
    folderPath?: string;
    html: string;
    properties: Array<
      | {
          name: string;
          slug: string;
          type: 'PlainText';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
            singleLine?: boolean;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'Option';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
            options: Array<string>;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'ComponentRef';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
            componentName: string;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'Color';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
            utilityPropertyKey: string;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'RichText';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'Image';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'Video';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'Link';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'Bool';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'ClassName';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
          };
        }
    >;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    createdBy: string;
    updatedBy: string;
    deletedBy?: string;
  }>;
};

export type GetComponentData = {
  /**
   * Unique identifier
   */
  componentId: string;
  /**
   * Unique identifier for the Site
   */
  siteId: string;
};

export type GetComponentResponse = {
  data?: {
    id: string;
    name: string;
    folderId: string | null;
    folderPath?: string;
    html: string;
    properties: Array<
      | {
          name: string;
          slug: string;
          type: 'PlainText';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
            singleLine?: boolean;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'Option';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
            options: Array<string>;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'ComponentRef';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
            componentName: string;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'Color';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
            utilityPropertyKey: string;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'RichText';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'Image';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'Video';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'Link';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'Bool';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
          };
        }
      | {
          name: string;
          slug: string;
          type: 'ClassName';
          editable: boolean;
          required?: boolean;
          validations: {
            visualModes?: Array<'content' | 'developer' | 'designer'>;
          };
        }
    >;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
    createdBy: string;
    updatedBy: string;
    deletedBy?: string;
  };
};

export type GetAssetData = {
  /**
   * Unique identifier
   */
  assetId: string;
};

export type GetAssetResponse = {
  data: {
    id: string;
    fileName: string;
    fileHash: string;
    folderPath?: string;
    hostedUrl: string;
    createdAt: string;
    updatedAt: string;
    width?: number;
    height?: number;
    fileSize?: number;
  };
};

export type UpdateAssetData = {
  /**
   * Unique identifier
   */
  assetId: string;
  requestBody: {
    fileName: string;
    folderPath?: string;
  };
};

export type UpdateAssetResponse = {
  data: {
    id: string;
    fileName: string;
    fileHash: string;
    folderPath?: string;
    hostedUrl: string;
    createdAt: string;
    updatedAt: string;
    width?: number;
    height?: number;
    fileSize?: number;
  };
};

export type DeleteAssetData = {
  /**
   * Unique identifier
   */
  assetId: string;
};

export type DeleteAssetResponse = {
  data: {
    id: string;
    fileName: string;
    fileHash: string;
    folderPath?: string;
    hostedUrl: string;
    createdAt: string;
    updatedAt: string;
    width?: number;
    height?: number;
    fileSize?: number;
  };
};

export type ListAssetsData = {
  /**
   * Unique identifier for the Workspace
   */
  workspaceId: string;
};

export type ListAssetsResponse = {
  data?: Array<{
    id: string;
    fileName: string;
    fileHash: string;
    folderPath?: string;
    hostedUrl: string;
    createdAt: string;
    updatedAt: string;
    width?: number;
    height?: number;
    fileSize?: number;
  }>;
  limit?: number;
  offset?: number;
  total?: number;
};

export type CreateAssetData = {
  formData: {
    file: {
      [key: string]: unknown;
    };
    fileName: string;
    folderPath?: string;
  };
  /**
   * Unique identifier for the Workspace
   */
  workspaceId: string;
};

export type CreateAssetResponse = {
  data: {
    id: string;
    fileName: string;
    fileHash: string;
    folderPath?: string;
    hostedUrl: string;
    createdAt: string;
    updatedAt: string;
    width?: number;
    height?: number;
    fileSize?: number;
  };
};

export type ListFormsData = {
  /**
   * Unique identifier for the Site
   */
  siteId: string;
};

export type ListFormsResponse = {
  data: Array<{
    /**
     * Unique identifier
     */
    id?: string;
    /**
     * Unique identifier
     */
    siteId?: string;
    name?: string;
    /**
     * Date and time in ISO 8601 format
     */
    createdAt?: string;
    /**
     * Date and time in ISO 8601 format
     */
    updatedAt?: string;
  }>;
};

export type GetFormData = {
  /**
   * Unique identifier
   */
  formId: string;
};

export type GetFormResponse = {
  data: {
    /**
     * Unique identifier
     */
    id?: string;
    /**
     * Unique identifier
     */
    siteId?: string;
    name?: string;
    /**
     * Date and time in ISO 8601 format
     */
    createdAt?: string;
    /**
     * Date and time in ISO 8601 format
     */
    updatedAt?: string;
  };
};

export type ListFormSubmissionsData = {
  /**
   * Unique identifier
   */
  formId: string;
};

export type ListFormSubmissionsResponse = {
  data: Array<{
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Unique identifier
     */
    formId: string;
    /**
     * Unique identifier
     */
    siteId: string;
    createdAt: string;
    formResponse: {
      [key: string]: unknown;
    };
  }>;
};

export type GetFormSubmissionData = {
  /**
   * Unique identifier
   */
  formSubmissionId: string;
};

export type GetFormSubmissionResponse = {
  data: {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Unique identifier
     */
    formId: string;
    /**
     * Unique identifier
     */
    siteId: string;
    createdAt: string;
    formResponse: {
      [key: string]: unknown;
    };
  };
};

export type ListCollectionsData = {
  /**
   * Unique identifier for the Site
   */
  siteId: string;
};

export type ListCollectionsResponse = {
  data?: Array<{
    id?: string;
    name?: string;
    singularName?: string;
    slug?: string;
    createdAt?: string;
    publishedAt?: string;
    updatedAt?: string;
  }>;
};

export type GetCollectionData = {
  /**
   * Unique identifier
   */
  collectionId: string;
};

export type GetCollectionResponse = {
  /**
   * Unique identifier
   */
  id?: string;
  name?: string;
  slug?: string;
  singularName?: string;
  /**
   * Date and time in ISO 8601 format
   */
  createdAt?: string;
  /**
   * Date and time in ISO 8601 format
   */
  publishedAt?: string;
  /**
   * Date and time in ISO 8601 format
   */
  updatedAt?: string;
  fields?: Array<{
    name: string;
    slug: string;
    type: string;
    editable?: boolean;
    required?: boolean;
    validations?: {
      collectionId?: string;
    };
  }>;
};

export type ListItemsData = {
  apiKey: string;
  /**
   * Unique identifier
   */
  collectionId: string;
  limit?: number;
  offset?: number;
};

export type ListItemsResponse = {
  data?: Array<{
    /**
     * Unique identifier
     */
    id: string;
    createdAt: string;
    updatedAt: string;
    fieldData: {
      name?: string;
      slug?: string;
      [key: string]: unknown | string;
    };
  }>;
  limit?: number;
  offset?: number;
  total?: number;
};

export type DeleteItemsData = {
  /**
   * Unique identifier
   */
  collectionId: string;
  requestBody: {
    itemIds: Array<string>;
  };
};

export type DeleteItemsResponse = {
  [key: string]: unknown;
};

export type CreateItemData = {
  /**
   * Unique identifier
   */
  collectionId: string;
  requestBody: {
    fieldData: {
      name?: string;
      slug?: string;
      [key: string]: unknown | string;
    };
  };
};

export type CreateItemResponse = {
  data: {
    /**
     * Unique identifier
     */
    id: string;
    createdAt: string;
    updatedAt: string;
    fieldData: {
      name?: string;
      slug?: string;
      [key: string]: unknown | string;
    };
  };
};

export type GetItemData = {
  /**
   * Unique identifier for the Collection
   */
  collectionId: string;
  /**
   * Unique identifier for the Item
   */
  itemId: string;
};

export type GetItemResponse = {
  data: {
    /**
     * Unique identifier
     */
    id: string;
    createdAt: string;
    updatedAt: string;
    fieldData: {
      name?: string;
      slug?: string;
      [key: string]: unknown | string;
    };
  };
};

export type UpdateItemData = {
  /**
   * Unique identifier
   */
  collectionId: string;
  /**
   * Unique identifier
   */
  itemId: string;
  requestBody: {
    fieldData: {
      name?: string;
      slug?: string;
      [key: string]: unknown | string;
    };
  };
};

export type UpdateItemResponse = {
  data: {
    /**
     * Unique identifier
     */
    id: string;
    createdAt: string;
    updatedAt: string;
    fieldData: {
      name?: string;
      slug?: string;
      [key: string]: unknown | string;
    };
  };
};

export type CreateWebhookData = {
  requestBody: {
    eventType:
      | 'form.submission'
      | 'site.published'
      | 'collection.item.created'
      | 'collection.item.updated'
      | 'collection.items.deleted';
    url: string;
    filters?: {
      formId?: string;
    };
  };
  /**
   * Unique identifier for the Site
   */
  siteId: string;
};

export type CreateWebhookResponse = {
  data: {
    id: string;
    siteId: string;
    url: string;
    createdAt: string;
    disabledAt: string | null;
    filters?: {
      formId?: string;
    };
    lastTriggeredAt: string | null;
    eventType:
      | 'form.submission'
      | 'site.published'
      | 'collection.item.created'
      | 'collection.item.updated'
      | 'collection.items.deleted';
  };
};

export type ListWebhooksData = {
  siteId: string;
};

export type ListWebhooksResponse = {
  data?: Array<{
    id: string;
    siteId: string;
    url: string;
    createdAt: string;
    disabledAt: string | null;
    filters?: {
      formId?: string;
    };
    lastTriggeredAt: string | null;
    eventType:
      | 'form.submission'
      | 'site.published'
      | 'collection.item.created'
      | 'collection.item.updated'
      | 'collection.items.deleted';
  }>;
};

export type GetWebhookData = {
  /**
   * Unique identifier
   */
  webhookId: string;
};

export type GetWebhookResponse = {
  data: {
    id: string;
    siteId: string;
    url: string;
    createdAt: string;
    disabledAt: string | null;
    filters?: {
      formId?: string;
    };
    lastTriggeredAt: string | null;
    eventType:
      | 'form.submission'
      | 'site.published'
      | 'collection.item.created'
      | 'collection.item.updated'
      | 'collection.items.deleted';
  };
};

export type DeleteWebhookData = {
  /**
   * Unique identifier
   */
  webhookId: string;
};

export type DeleteWebhookResponse = {
  message: string;
};
