// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type {
  ListSitesResponse,
  GetSiteByIdData,
  GetSiteByIdResponse,
  PublishSiteData,
  PublishSiteResponse,
  ListPagesData,
  ListPagesResponse,
  GetPageData,
  GetPageResponse,
  ListComponentsData,
  ListComponentsResponse,
  GetComponentData,
  GetComponentResponse,
  GetAssetData,
  GetAssetResponse,
  UpdateAssetData,
  UpdateAssetResponse,
  DeleteAssetData,
  DeleteAssetResponse,
  ListAssetsData,
  ListAssetsResponse,
  CreateAssetData,
  CreateAssetResponse,
  ListFormsData,
  ListFormsResponse,
  GetFormData,
  GetFormResponse,
  ListFormSubmissionsData,
  ListFormSubmissionsResponse,
  GetFormSubmissionData,
  GetFormSubmissionResponse,
  ListCollectionsData,
  ListCollectionsResponse,
  GetCollectionData,
  GetCollectionResponse,
  ListItemsData,
  ListItemsResponse,
  DeleteItemsData,
  DeleteItemsResponse,
  CreateItemData,
  CreateItemResponse,
  GetItemData,
  GetItemResponse,
  UpdateItemData,
  UpdateItemResponse,
  CreateWebhookData,
  CreateWebhookResponse,
  ListWebhooksData,
  ListWebhooksResponse,
  GetWebhookData,
  GetWebhookResponse,
  DeleteWebhookData,
  DeleteWebhookResponse,
} from './types.gen';

export class SitesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List of all sites
   * @returns unknown Default Response
   * @throws ApiError
   */
  public list(): CancelablePromise<ListSitesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/sites',
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Get a site by its site id
   * @param data The data for the request.
   * @param data.siteId Unique identifier for the Site
   * @returns unknown Default Response
   * @throws ApiError
   */
  public get(data: GetSiteByIdData): CancelablePromise<GetSiteByIdResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/sites/{siteId}',
      path: {
        siteId: data.siteId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Publish a site
   * @param data The data for the request.
   * @param data.siteId Unique identifier for the Site
   * @returns unknown Default Response
   * @throws ApiError
   */
  public publish(data: PublishSiteData): CancelablePromise<PublishSiteResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/sites/{siteId}/publish',
      path: {
        siteId: data.siteId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }
}

export class PagesService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List of pages in a site
   * @param data The data for the request.
   * @param data.siteId Unique identifier for the Site
   * @returns unknown Default Response
   * @throws ApiError
   */
  public list(data: ListPagesData): CancelablePromise<ListPagesResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/sites/{siteId}/pages',
      path: {
        siteId: data.siteId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Get page data
   * @param data The data for the request.
   * @param data.siteId Unique identifier for the Site
   * @param data.pageId Unique identifier for the Page
   * @returns unknown Default Response
   * @throws ApiError
   */
  public get(data: GetPageData): CancelablePromise<GetPageResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/sites/{siteId}/pages/{pageId}',
      path: {
        siteId: data.siteId,
        pageId: data.pageId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }
}

export class ComponentsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List of components in a site
   * @param data The data for the request.
   * @param data.siteId Unique identifier for the Site
   * @returns unknown Default Response
   * @throws ApiError
   */
  public list(data: ListComponentsData): CancelablePromise<ListComponentsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/sites/{siteId}/components',
      path: {
        siteId: data.siteId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Get Component
   * Get a component from a site by its id
   * @param data The data for the request.
   * @param data.siteId Unique identifier for the Site
   * @param data.componentId Unique identifier
   * @returns unknown Default Response
   * @throws ApiError
   */
  public get(data: GetComponentData): CancelablePromise<GetComponentResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/sites/{siteId}/components/{componentId}',
      path: {
        siteId: data.siteId,
        componentId: data.componentId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }
}

export class AssetsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Get Asset
   * Get an asset by its id
   * @param data The data for the request.
   * @param data.assetId Unique identifier
   * @returns unknown Default Response
   * @throws ApiError
   */
  public get(data: GetAssetData): CancelablePromise<GetAssetResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/assets/{assetId}',
      path: {
        assetId: data.assetId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Update an asset
   * @param data The data for the request.
   * @param data.assetId Unique identifier
   * @param data.requestBody
   * @returns unknown Default Response
   * @throws ApiError
   */
  public update(data: UpdateAssetData): CancelablePromise<UpdateAssetResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/assets/{assetId}',
      path: {
        assetId: data.assetId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Delete Asset
   * Delete an asset
   * @param data The data for the request.
   * @param data.assetId Unique identifier
   * @returns unknown Default Response
   * @throws ApiError
   */
  public delete(data: DeleteAssetData): CancelablePromise<DeleteAssetResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/assets/{assetId}',
      path: {
        assetId: data.assetId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * List Assets
   * List of all assets in a workspace
   * @param data The data for the request.
   * @param data.workspaceId Unique identifier for the Workspace
   * @returns unknown Default Response
   * @throws ApiError
   */
  public list(data: ListAssetsData): CancelablePromise<ListAssetsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/workspaces/{workspaceId}/assets',
      path: {
        workspaceId: data.workspaceId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Create Asset
   * Create an asset in a workspace
   * @param data The data for the request.
   * @param data.workspaceId Unique identifier for the Workspace
   * @param data.formData
   * @returns unknown Default Response
   * @throws ApiError
   */
  public create(data: CreateAssetData): CancelablePromise<CreateAssetResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/workspaces/{workspaceId}/assets',
      path: {
        workspaceId: data.workspaceId,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }
}

export class FormsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List of all forms in a site
   * @param data The data for the request.
   * @param data.siteId Unique identifier for the Site
   * @returns unknown Default Response
   * @throws ApiError
   */
  public list(data: ListFormsData): CancelablePromise<ListFormsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/sites/{siteId}/forms',
      path: {
        siteId: data.siteId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Get Form
   * @param data The data for the request.
   * @param data.formId Unique identifier
   * @returns unknown Default Response
   * @throws ApiError
   */
  public get(data: GetFormData): CancelablePromise<GetFormResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/forms/{formId}',
      path: {
        formId: data.formId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }
}

export class FormSubmissionsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List Form Submissions
   * @param data The data for the request.
   * @param data.formId Unique identifier
   * @returns unknown Default Response
   * @throws ApiError
   */
  public list(data: ListFormSubmissionsData): CancelablePromise<ListFormSubmissionsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/forms/{formId}/submissions',
      path: {
        formId: data.formId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * List of all forms submissions by form id
   * @param data The data for the request.
   * @param data.formSubmissionId Unique identifier
   * @returns unknown Default Response
   * @throws ApiError
   */
  public get(data: GetFormSubmissionData): CancelablePromise<GetFormSubmissionResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/form_submissions/{formSubmissionId}',
      path: {
        formSubmissionId: data.formSubmissionId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }
}

export class CollectionsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List of all collections in a given site
   * @param data The data for the request.
   * @param data.siteId Unique identifier for the Site
   * @returns unknown Default Response
   * @throws ApiError
   */
  public list(data: ListCollectionsData): CancelablePromise<ListCollectionsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/sites/{siteId}/collections',
      path: {
        siteId: data.siteId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Get a collection
   * @param data The data for the request.
   * @param data.collectionId Unique identifier
   * @returns unknown Default Response
   * @throws ApiError
   */
  public get(data: GetCollectionData): CancelablePromise<GetCollectionResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/collections/{collectionId}',
      path: {
        collectionId: data.collectionId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }
}

export class ItemsService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * List of items in a collection
   * @param data The data for the request.
   * @param data.apiKey
   * @param data.collectionId Unique identifier
   * @param data.limit
   * @param data.offset
   * @returns unknown Default Response
   * @throws ApiError
   */
  public list(data: ListItemsData): CancelablePromise<ListItemsResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/collections/{collectionId}/items',
      path: {
        collectionId: data.collectionId,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        api_key: data.apiKey,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Delete items in a collection
   * @param data The data for the request.
   * @param data.collectionId Unique identifier
   * @param data.requestBody
   * @returns unknown Default Response
   * @throws ApiError
   */
  public delete(data: DeleteItemsData): CancelablePromise<DeleteItemsResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/collections/{collectionId}/items',
      path: {
        collectionId: data.collectionId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Create an item in a collection
   * @param data The data for the request.
   * @param data.collectionId Unique identifier
   * @param data.requestBody
   * @returns unknown Default Response
   * @throws ApiError
   */
  public create(data: CreateItemData): CancelablePromise<CreateItemResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/collections/{collectionId}/items',
      path: {
        collectionId: data.collectionId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Get an item in a collection
   * @param data The data for the request.
   * @param data.collectionId Unique identifier for the Collection
   * @param data.itemId Unique identifier for the Item
   * @returns unknown Default Response
   * @throws ApiError
   */
  public get(data: GetItemData): CancelablePromise<GetItemResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/collections/{collectionId}/items/{itemId}',
      path: {
        collectionId: data.collectionId,
        itemId: data.itemId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Update an item in a collection
   * @param data The data for the request.
   * @param data.collectionId Unique identifier
   * @param data.itemId Unique identifier
   * @param data.requestBody
   * @returns unknown Default Response
   * @throws ApiError
   */
  public update(data: UpdateItemData): CancelablePromise<UpdateItemResponse> {
    return this.httpRequest.request({
      method: 'PATCH',
      url: '/collections/{collectionId}/items/{itemId}',
      path: {
        collectionId: data.collectionId,
        itemId: data.itemId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }
}

export class WebhooksService {
  constructor(public readonly httpRequest: BaseHttpRequest) {}

  /**
   * Create webhook
   * @param data The data for the request.
   * @param data.siteId Unique identifier for the Site
   * @param data.requestBody
   * @returns unknown Default Response
   * @throws ApiError
   */
  public create(data: CreateWebhookData): CancelablePromise<CreateWebhookResponse> {
    return this.httpRequest.request({
      method: 'POST',
      url: '/sites/{siteId}/webhooks',
      path: {
        siteId: data.siteId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * List all webhooks by site ID
   * @param data The data for the request.
   * @param data.siteId
   * @returns unknown Default Response
   * @throws ApiError
   */
  public list(data: ListWebhooksData): CancelablePromise<ListWebhooksResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/sites/{siteId}/webhooks',
      path: {
        siteId: data.siteId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Get a webhook by ID
   * @param data The data for the request.
   * @param data.webhookId Unique identifier
   * @returns unknown Default Response
   * @throws ApiError
   */
  public get(data: GetWebhookData): CancelablePromise<GetWebhookResponse> {
    return this.httpRequest.request({
      method: 'GET',
      url: '/webhooks/{webhookId}',
      path: {
        webhookId: data.webhookId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }

  /**
   * Delete a webhook by ID
   * @param data The data for the request.
   * @param data.webhookId Unique identifier
   * @returns unknown Default Response
   * @throws ApiError
   */
  public delete(data: DeleteWebhookData): CancelablePromise<DeleteWebhookResponse> {
    return this.httpRequest.request({
      method: 'DELETE',
      url: '/webhooks/{webhookId}',
      path: {
        webhookId: data.webhookId,
      },
      errors: {
        401: 'Default Response',
        404: 'Default Response',
        429: 'Default Response',
        '4XX': 'Default Response',
      },
    });
  }
}
